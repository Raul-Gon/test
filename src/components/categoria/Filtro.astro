---
import CategoriaRango2 from "./CategoriaRango2.astro";

interface Props {
    idf: string;
    titulo: string;
    nombre: string;
    valores?: string[];
    colores?: any;
    tipo?: 'lista' | 'color' | 'precio';
}

const {idf, titulo, nombre, valores, colores, tipo = 'lista'} = Astro.props;
const coloresArray = Array.isArray(colores) ? colores : Object.values(colores ?? {});

---
 
  <div>
    <button data-button-filter={idf} data-idf={idf} type="button" class="flex items-center justify-between p-3 gap-2 font-medium rtl:text-right text-gray-800 border border-gray-700 hover:bg-gray-100 transition">
        <span>{titulo}</span>
        <svg class="w-6 h-6 transition-transform duration-300 shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
    </button>
    <div data-category-filter={idf} class="hidden absolute z-20 w-80">
      <div class="max-h-96 overflow-y-auto bg-white border border-gray-800 text-gray-800">
        {tipo === 'color' && coloresArray.length > 0 
                      ? (
                          <>
                            {coloresArray.map((col, index) => (
                                        <div class={index > coloresArray.length-2 ? 'flex items-center p-3 ml-4' : 'flex items-center p-3 ml-4 border-0 border-b border-b-black'}>
                                          <div class={`w-6 h-6 ${col.color} mr-4 rounded border`}></div>
                                          <button data-valor={col.valor} data-filter={nombre} class="color-option w-full h-full text-left m-0 pl-5 py-2 hover:bg-gray-400 hover:cursor-pointer">{col.nom}</button>
                                        </div>
                                      ))
                            }
                          </>
                        ) 
                      : tipo === 'lista' && valores?.length > 0 
                          ? 
                            (
                              <>
                                {valores.map((valor, index) => (
                                            <div class={index > valores.length-2 ? 'p-3 ml-4' : 'p-3 ml-4 border-0 border-b border-b-black'}>
                                              <button data-valor={valor} data-filter={nombre} class="w-full h-full text-left m-0 pl-5 py-2 hover:bg-gray-400 hover:cursor-pointer">{valor}</button>
                                            </div>
                                          ))
                                }
                              </>
                            )
                          :   <CategoriaRango2 />
                              <div class="m-4 mb-10 flex items-center justify-between">
                                <p class="font-bold">Ofertas</p>
                                <label class="inline-flex items-center cursor-pointer">
                                  <input type="checkbox" value="" class="sr-only peer">
                                  <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all peer-checked:bg-gray-600"></div>
                                </label>
                              </div>
                              <div class="m-4 flex items-center justify-between">
                                <p class="font-bold">Envío gratuito</p>
                                <label class="inline-flex items-center cursor-pointer">
                                  <input type="checkbox" value="" class="sr-only peer">
                                  <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all peer-checked:bg-gray-600"></div>
                                </label>
                              </div>
                              <p class="m-4 mb-10 text-sm text-gray-400">en pedidos a partir de 25,90 €</p>
        }
      </div>
      <div class="flex justify-between border border-black">
        { tipo === 'precio'
                ?
                  <button data-precio-clean class="w-1/2 flex items-center justify-center py-4 bg-white cursor-pointer">Borrar</button>
                :
                  <button data-clean={nombre} class="w-1/2 flex items-center justify-center py-4 bg-white cursor-pointer">Borrar</button>
        }
        <button data-button-save class="w-1/2 flex items-center justify-center py-4 bg-gray-400 cursor-pointer">Guardar</button>
      </div>
    </div>
  </div>


<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Selecciona todos los botones con data-idf
    document.querySelectorAll('[data-button-filter]').forEach(boton => {
      // Evita añadir múltiples listeners al mismo botón
      if (!boton.dataset.listenerAdded) {
          boton.addEventListener('click', () => {
            //crea el evento personalizado
            const evento = new CustomEvent('filtro-seleccionado', {
              detail: { mensaje: `¡Filtro seleccionado! idf: ${boton.dataset.idf}`,
                        idf: boton.dataset.idf,
                      }
            });
            boton.dispatchEvent(evento); //dispara el evento
          });
          //escucha el evento en el mismo boton y ejecuta el siguiente codigo
          boton.addEventListener('filtro-seleccionado', (e) => {
            
            //console.log(e.detail.mensaje , e.detail.idf); //imprime en consola para ver que boton lo ha seleccionado y llega hasta aquí

            const target = document.querySelector(`[data-category-filter="${e.detail.idf}"]`);
            const icon = boton.querySelector('svg');
            const isOpen = !target.classList.contains('hidden');

            // Cierra todos para que solo este abierto el seleccionado
            closeAllAccordions();

            // Si estaba cerrado, abre el acordeón y gira la flecha
            if (!isOpen) {
                target.classList.remove('hidden');
                icon.classList.add('rotate-180');
            }

          });

          boton.dataset.listenerAdded = "true"; //marca el boton con el atributo personalizado para indicar que ya se le ha añadido el listener
      }

      // Función para cerrar todos los acordeones
      const closeAllAccordions = () => {
        document.querySelectorAll('[data-category-filter]').forEach(el => {
          el.classList.add('hidden');
        });

        // Resetea todas las flechas (las vuelve a la posición inicial)
        document.querySelectorAll('[data-button-filter] svg').forEach(svg => {
          svg.classList.remove('rotate-180');
        });
      };
      
      // Cierra los acordeones si el clic es fuera de ellos
      document.addEventListener('click', (event) => {
        const isClickInsideAccordion = event.target.closest('#accordion-example');
        if (!isClickInsideAccordion) {
          closeAllAccordions();
        }
      });

    });
  });
</script>

<script>
import type CategoriaRango2 from "./CategoriaRango2.astro";


  // Objeto que contendrá los filtros activos
  const filtros = {};

  // Creamos el evento personalizado con los datos de filtros que haya en ese momento para que cuando el disparador diga el escuchador los tenga
  //CUSTOM EVENT 
  const eventoFiltro = new CustomEvent('filtrado', {
    detail: {
      mensaje: `¡Filtro seleccionado!: `,
      filtros: filtros,
    },
  });
  

  // Luego, añadir listener click para cada botón para añadir filtros y disparar el evento filtro
  document.querySelectorAll('[data-filter]').forEach((btn) => {
    btn.addEventListener('click', () => {
      const atributo = btn.dataset.filter;  //seleccionamos el contenido de data-filter del boton clickado
      const valor = btn.dataset.valor;      //seleccionamos el valor de data-valor del boton clickado

      const seleccionado = btn.classList.toggle('activo');  //creamos una constante para saber si el boton ha sido seleccionado o no antes, toggle lo inserta si no esta y devuelbe true, en caso contrario lo borra y devuelbe false
      if (!seleccionado) {  //para sombrear el boton o no cuando se hace click sobre el
        btn.classList.remove('bg-gray-400');
      } else {
        btn.classList.add('bg-gray-400');
      }

      console.log(atributo, valor, seleccionado);


      if (!filtros[atributo]) {     //si en filtros todabia no hemos insertado ningun valor de ese atributo creamos el array del atributo en filtros para introducirle los valores que se clicken
        filtros[atributo] = [];
      }

      if (seleccionado) {   //si el boton se ha seleccionado
        if (!filtros[atributo].includes(valor)) {   //y el valor no esta en el array del atributo lo insertamos
          filtros[atributo].push(valor);
        }
      } else {    //si el boton no tiene el atributo seleccionado es pero se ha clickado
        filtros[atributo] = filtros[atributo].filter(v => v !== valor);   //y dentro del array atributo esta el valor clickado lo borramos de este
        if (filtros[atributo].length === 0) {   //si el array de atributo, se ha quedado vacio al borrar el valor anterior lo borramos dejando filtro sin ese atributo
          delete filtros[atributo];
        }
      }

      console.log(filtros);
      
      //dispara nuestro CUSTOM EVENT para filtrar los productos en CategoriaCardFavo2.astro que se encuentra el ESCUCHADOR del EVENTO
      btn.dispatchEvent(eventoFiltro);
    });
  });


  //creamos un escuchador para cuando cambiamos precio o rango de precio del evento de CategoriaRango2.astro
  document.addEventListener('rango', (e) => {
      console.log(e.detail.atributo, e.detail.valueMax, e.detail.valueMin);
      anadirFiltroPrecio(e.detail.atributo, e.detail.valueMax, e.detail.valueMin);
  });
  //creamos una funcion para añadir el filtro de precio a filtros y mandarlo a filtrar.
  function anadirFiltroPrecio(atributo, max, min){
    
    filtros[atributo] = { min, max };

    //disparamos el EVENTO eventoFiltro para mandar el filtro a CategoriaCardFavo2.astro para ser filtrado
    document.dispatchEvent(eventoFiltro);

  }



  //CUSTOM EVENT para los botones de borrar filtros de ese tipo
  const eventoClean = new CustomEvent('limpieza', {
    detail: {
      mensaje: `limpieza de filtros seleccionada!: `,
      filtros: filtros,
    },
  });
  //Seleccionamos los botones de borrar filtros para quitar todos los filtros de ese tipo
  document.querySelectorAll('[data-clean]').forEach((buttonClean:HTMLButtonElement) => {
    buttonClean.addEventListener('click', () => {
      const filter = buttonClean.dataset?.clean;
      
      if (filtros[filter]){
          //quitamos las marcas visuales de los botones
          document.querySelectorAll(`[data-filter = ${filter}]`).forEach((buttonFilter:HTMLButtonElement) => {
            buttonFilter.classList.remove('bg-gray-400'); //quitamos la marca visual de los botones
          })

          //seleccionamos todos los elementos con data-product para mostrarlos de nuevo
          const producto = document.querySelectorAll(`[data-${filter}]`);
          producto.forEach((product) => {
            product.classList.remove('hidden');
                
          });

          //borramos el objeto del filtro que se ha seleccionado
          delete filtros[filter];
        
      }

      //para cerrar los accordion
      document.querySelectorAll('[data-category-filter]').forEach(el => {
        el.classList.add('hidden');
      });

      // Resetea todas las flechas (las vuelve a la posición inicial)
      document.querySelectorAll('[data-button-filter] svg').forEach(svg => {
        svg.classList.remove('rotate-180');
      });

      //llamamos al disparador del eventoClean para hacer los filtros si hubiera alguno
      if (filtros.length != 0 ){
        buttonClean.dispatchEvent(eventoClean);
      }

    })
  })
   
  //creamos un evento para el boton de borrar filtros de precio que es distinto a los demas
  const eventoBotonPrecio = new CustomEvent('limpiaPrecio', {
    detail:{
      mensaje: `Se ha pulsado el boton del borrar de precio`,
    },
  });
  //llamamos al evento para limpiar el filtro de precio en CategoriaRango2.astro
  document.querySelectorAll('[data-precio-clean]').forEach(btn => {
    btn.addEventListener('click', () => {
      btn.dispatchEvent(eventoBotonPrecio);
    });
  });


  //Seleccionamos los botones de guardar filtros que aunque no van ha hacer nada pq los filtros ya estan aplicados vamos a guardar el accordion
  document.querySelectorAll('[data-button-save]').forEach((buttonSave:HTMLButtonElement) => {
    buttonSave.addEventListener('click', () => {

        //para cerrar los accordion
        document.querySelectorAll('[data-category-filter]').forEach(el => {
          el.classList.add('hidden');
        });

        // Resetea todas las flechas (las vuelve a la posición inicial)
        document.querySelectorAll('[data-button-filter] svg').forEach(svg => {
          svg.classList.remove('rotate-180');
        });

    })
  })

</script>